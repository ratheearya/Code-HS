/* Constants for bricks */
var NUM_ROWS = 10;
var BRICK_TOP_OFFSET = 10;
var BRICK_SPACING = 2;
var NUM_BRICKS_PER_ROW = 10;
var BRICK_HEIGHT = 10;
var SPACE_FOR_BRICKS = getWidth() - (NUM_BRICKS_PER_ROW + 1) * BRICK_SPACING;
var BRICK_WIDTH = SPACE_FOR_BRICKS / NUM_BRICKS_PER_ROW;
var ball;
var dx = 4;
var dy = 4;
var paddle;
var pause=false;
/* Constants for ball and paddle */
var PADDLE_WIDTH = 80;
var PADDLE_HEIGHT = 15;
var PADDLE_OFFSET = 10;
var lifes = 3;
var BALL_RADIUS = 15;
function start(){
    var SCORE=0;
	makeWall();
	makeBall();   
    makePaddle();    
    mouseMoveMethod(movePaddle);
	setTimer(draw, 20);
    mouseClickMethod(restart);
    //println(NUM_ROWS * NUM_BRICKS_PER_ROW);
    if(SCORE == NUM_ROWS * NUM_BRICKS_PER_ROW){
        endGame(SCORE);
    }
}
function collision(SCORE){
    var botL = getElementAt(ball.getX()-BALL_RADIUS,ball.getY()+BALL_RADIUS);
    var topL = getElementAt(ball.getX()-BALL_RADIUS,ball.getY()-BALL_RADIUS);
    var topR = getElementAt(ball.getX()+BALL_RADIUS,ball.getY()-BALL_RADIUS);
    var botR = getElementAt(ball.getX()+BALL_RADIUS,ball.getY()+BALL_RADIUS);
    
    if(topL!=null){
        dy=Math.abs(dy);
        remove(topL);
        SCORE=SCORE+1;
    }else if(topR != null){
        dy=Math.abs(dy);
        remove(topR);
        SCORE=SCORE+1;
    }else if(botR != null){
        dy=-Math.abs(dy);
    }else if(botL != null){
        dy=-Math.abs(dy);
        }
        //println(SCORE);
}
function endGame(){
    removeAll();
    stop(draw);
    var txt = new Text("Game Over!","30pt Arial");
    txt.setPosition(100,getWidth()/2);
    txt.setColor(Color.red);
    add(txt);
}
function stopball(){
    startBall();
}
function draw(SCORE){
	checkWalls(pause);
	collision(SCORE);
	if(pause==false){
	    ball.move(dx, dy);
	}
}
function checkWalls(){
	// Bounce off right wall
	if(ball.getX() + ball.getRadius() > getWidth()){
		dx = -dx;
	}
	
	// Bounce off left wall
	if(ball.getX() - ball.getRadius() < 0){
		dx = -dx;
	}
	
	// Bounce off bottom wall
	if(ball.getY() + ball.getRadius() > getHeight()){
	    pause=true;
	    lifes=lifes-1;
	    if(lifes==0){
	        endGame();
	    }
	    ball.setPosition(getWidth()/2,getHeight()/2);
	}
	
	// Bounce off top wall
	if(ball.getY() - ball.getRadius() < 0){
		dy = -dy;
	}
}
function restart(e){
    pause=false;
}









function makePaddle(){
    paddle = new Rectangle(PADDLE_WIDTH,PADDLE_HEIGHT);
    paddle.setPosition(getWidth()/2,getHeight()-PADDLE_OFFSET-PADDLE_HEIGHT);
    add(paddle);
}
function movePaddle(e){
    paddle.setPosition(e.getX()-(PADDLE_WIDTH/2),getHeight()- PADDLE_OFFSET-PADDLE_HEIGHT);
}
function makeBall(){
    ball= new Circle(BALL_RADIUS);
    ball.setPosition(getWidth()/2,getHeight()/2);
    add(ball);
}
function makeWall(){
    var row = 0;
    for(var i=0;i<NUM_ROWS;i++){
        makeRow(row);
        row = row+1;
    }
}
function makeRow(row){
    for(var i=0;i<NUM_BRICKS_PER_ROW;i++){
        makeBrick(i,row);
    }
}
function makeBrick(i,row){
    var brick = new Rectangle(BRICK_WIDTH,BRICK_HEIGHT);
    brick.setPosition(i*(BRICK_WIDTH+BRICK_SPACING)+BRICK_SPACING,(row*(BRICK_HEIGHT+BRICK_SPACING))+BRICK_TOP_OFFSET);
    var color=brickColor(row);
    brick.setColor(color);
    add(brick);
}
function brickColor(row){
    var color;
    if(row%8==0 || row%8==1){
        color= Color.red;
        return color;
    }else if(row%8==2 || row%8==3){
        color=Color.orange;
        return color;
    }else if(row%8==4 || row%8==5){
        color=Color.green;
        return color;
    }else if(row%8==6 || row%8==7){
        color=Color.blue;
        return color;
    }
}
